{"version":3,"file":"static/js/544.ac0570fc.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n"],"names":["FewShotPromptTemplate","BaseStringPromptTemplate","constructor","input","super","Object","defineProperty","this","enumerable","configurable","writable","value","assign","undefined","examples","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","checkValidTemplate","prefix","suffix","templateFormat","_getPromptType","getExamples","selectExamples","partial","values","_this$partialVariable","newInputVariables","filter","iv","newPartialVariables","promptDict","format","allValues","mergePartialAndUserVariables","exampleStrings","Promise","all","map","example","examplePrompt","template","join","exampleSeparator","renderTemplate","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","PromptTemplate","Array","isArray"],"sourceRoot":""}