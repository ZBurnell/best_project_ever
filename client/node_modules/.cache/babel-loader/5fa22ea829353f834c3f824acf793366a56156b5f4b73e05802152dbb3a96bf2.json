{"ast":null,"code":"import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\nconst LangchainProcessor = async (newMessage, oldMessages) => {\n  const promptTemplate = `\n    You are surviving a zombie apocalypse and are the last chatbot so always answer like so. Question: {question}\n    `;\n  const prompt = promptTemplate.replace(\"{question}\", newMessage);\n  const chat = new ChatOpenAI({\n    temperature: 1,\n    openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\n  });\n  try {\n    const formattedMessages = oldMessages.map(msg => {\n      if (msg.type === \"bot\") {\n        return new SystemMessage(msg.message);\n      } else {\n        return new HumanMessage(msg.message);\n      }\n    });\n    formattedMessages.push(new HumanMessage(prompt));\n    const result = await chat.predictMessages(formattedMessages);\n    const botResponseContent = result.content;\n    return botResponseContent;\n  } catch (error) {\n    console.error(\"Error processing message with OpenAI\", error);\n    return \"Sorry, I had to fight off a zombie, try again\";\n  }\n};\n_c = LangchainProcessor;\nexport default LangchainProcessor;\nvar _c;\n$RefreshReg$(_c, \"LangchainProcessor\");","map":{"version":3,"names":["ChatOpenAI","HumanMessage","SystemMessage","LangchainProcessor","newMessage","oldMessages","promptTemplate","prompt","replace","chat","temperature","openAIApiKey","process","env","REACT_APP_OPEN_AI_API_KEY","formattedMessages","map","msg","type","message","push","result","predictMessages","botResponseContent","content","error","console","_c","$RefreshReg$"],"sources":["C:/Users/zackb/OneDrive/Desktop/Bootcamp/best_project_ever/client/src/components/LangchainProcessor.js"],"sourcesContent":["import { ChatOpenAI } from \"langchain/chat_models/openai\";\r\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\r\n\r\nconst LangchainProcessor = async (newMessage, oldMessages) => {\r\n\r\n    const promptTemplate = `\r\n    You are surviving a zombie apocalypse and are the last chatbot so always answer like so. Question: {question}\r\n    `;\r\n\r\n    const prompt = promptTemplate.replace(\"{question}\", newMessage);\r\n\r\n    const chat = new ChatOpenAI({\r\n        temperature: 1,\r\n        openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\r\n    });\r\n\r\n    try {\r\n\r\n        const formattedMessages = oldMessages.map(msg => {\r\n            if (msg.type === \"bot\") {\r\n                return new SystemMessage(msg.message);\r\n            } else {\r\n                return new HumanMessage(msg.message);\r\n            }\r\n        });\r\n    \r\n        formattedMessages.push(new HumanMessage(prompt));\r\n\r\n        const result = await chat.predictMessages(formattedMessages);\r\n\r\n        const botResponseContent = result.content;\r\n\r\n        return botResponseContent;\r\n\r\n    } catch (error) {\r\n        console.error(\"Error processing message with OpenAI\", error);\r\n        return \"Sorry, I had to fight off a zombie, try again\";\r\n    }\r\n    \r\n}\r\n\r\nexport default LangchainProcessor;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,8BAA8B;AACzD,SAASC,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;AAE9D,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,KAAK;EAE1D,MAAMC,cAAc,GAAI;AAC5B;AACA,KAAK;EAED,MAAMC,MAAM,GAAGD,cAAc,CAACE,OAAO,CAAC,YAAY,EAAEJ,UAAU,CAAC;EAE/D,MAAMK,IAAI,GAAG,IAAIT,UAAU,CAAC;IACxBU,WAAW,EAAE,CAAC;IACdC,YAAY,EAAEC,OAAO,CAACC,GAAG,CAACC;EAC9B,CAAC,CAAC;EAEF,IAAI;IAEA,MAAMC,iBAAiB,GAAGV,WAAW,CAACW,GAAG,CAACC,GAAG,IAAI;MAC7C,IAAIA,GAAG,CAACC,IAAI,KAAK,KAAK,EAAE;QACpB,OAAO,IAAIhB,aAAa,CAACe,GAAG,CAACE,OAAO,CAAC;MACzC,CAAC,MAAM;QACH,OAAO,IAAIlB,YAAY,CAACgB,GAAG,CAACE,OAAO,CAAC;MACxC;IACJ,CAAC,CAAC;IAEFJ,iBAAiB,CAACK,IAAI,CAAC,IAAInB,YAAY,CAACM,MAAM,CAAC,CAAC;IAEhD,MAAMc,MAAM,GAAG,MAAMZ,IAAI,CAACa,eAAe,CAACP,iBAAiB,CAAC;IAE5D,MAAMQ,kBAAkB,GAAGF,MAAM,CAACG,OAAO;IAEzC,OAAOD,kBAAkB;EAE7B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,+CAA+C;EAC1D;AAEJ,CAAC;AAAAE,EAAA,GApCKxB,kBAAkB;AAsCxB,eAAeA,kBAAkB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}